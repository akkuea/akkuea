name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-go:
    name: Test Go Backend
    runs-on: ubuntu-latest

    # PostgreSQL service for testing
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: akkuea_test
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd "pg_isready -U postgres -d akkuea_test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 30s
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      working-directory: ./packages/gin
      run: go mod download

    - name: Wait for PostgreSQL
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        echo "Starting PostgreSQL connection checks..."
        
        # Check if PostgreSQL container is running
        echo "Checking docker containers..."
        docker ps
        
        # Check port availability
        echo "Checking port 5432..."
        netstat -tlnp | grep :5432 || echo "Port 5432 not found"
        
        echo "Waiting for PostgreSQL to be ready..."
        for i in {1..60}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "PostgreSQL is ready after $i attempts!"
            break
          fi
          echo "Attempt $i: PostgreSQL not ready yet, waiting..."
          sleep 2
          if [ $i -eq 60 ]; then
            echo "PostgreSQL failed to start after 120 seconds"
            docker logs $(docker ps -q --filter "ancestor=postgres:15") || echo "No postgres container logs"
            exit 1
          fi
        done
        
        # Test database creation and connection
        echo "Testing database connection..."
        PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d akkuea_test -c "SELECT version();" || echo "Direct connection test failed"
        
        # Create test database if it doesn't exist
        echo "Ensuring test database exists..."
        PGPASSWORD=postgres createdb -h localhost -p 5432 -U postgres akkuea_test 2>/dev/null || echo "Database might already exist"

    - name: Run tests
      working-directory: ./packages/gin
      env:
        DB_HOST: localhost
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: akkuea_test
        DB_PORT: 5432
        JWT_SECRET: test-jwt-secret-key-for-ci-cd-pipeline
        PORT: 8080
        GIN_MODE: test
      run: go test ./... -v

  test-nextjs:
    name: Test Next.js Frontend
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      working-directory: ./packages/nextjs
      run: npm ci

    - name: Run tests
      working-directory: ./packages/nextjs
      run: npm test

    - name: Build application
      working-directory: ./packages/nextjs
      run: npm run build

  test-agent:
    name: Test Agent Package
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      working-directory: ./packages/agent
      run: npm ci

    - name: Build application
      working-directory: ./packages/agent
      run: npm run build

  test-assistant:
    name: Test Assistant Package
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      working-directory: ./packages/assistant
      run: npm ci

    - name: Build application
      working-directory: ./packages/assistant
      run: npm run build

  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Run Go format check
      working-directory: ./packages/gin
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "Go code is not formatted. Please run 'go fmt ./...'"
          exit 1
        fi

    - name: Run Go vet
      working-directory: ./packages/gin
      run: go vet ./...

    - name: Set up Node.js for Next.js linting
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Next.js dependencies
      working-directory: ./packages/nextjs
      run: npm ci

    - name: Run Next.js linting
      working-directory: ./packages/nextjs
      run: npm run lint
