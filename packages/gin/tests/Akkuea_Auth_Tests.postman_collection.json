{
  "info": {
    "name": "Akkuea Authentication Tests",
    "description": "Comprehensive test collection for Akkuea backend authentication endpoints including registration, login, and protected routes with role-based access control.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "educator_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "student_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "designer_token",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/health",
          "host": ["{{base_url}}"],
          "path": ["health"]
        },
        "description": "Basic health check to verify server is running"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has status property\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('status');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Register Educator",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"John Educator\",\n    \"email\": \"john.educator@akkuea.com\",\n    \"password\": \"securepassword123\",\n    \"role\": \"Educator\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/auth/register",
          "host": ["{{base_url}}"],
          "path": ["auth", "register"]
        },
        "description": "Register a new educator user"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test(\"Response contains token and user data\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('data');",
              "    pm.expect(jsonData.data).to.have.property('token');",
              "    pm.expect(jsonData.data).to.have.property('user');",
              "});",
              "",
              "pm.test(\"User role is Educator\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.user.role).to.eql('Educator');",
              "});",
              "",
              "pm.test(\"Password is not returned\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.user).to.not.have.property('password');",
              "});",
              "",
              "// Save token for subsequent requests",
              "if (pm.response.code === 201) {",
              "    const jsonData = pm.response.json();",
              "    pm.collectionVariables.set('educator_token', jsonData.data.token);",
              "    pm.collectionVariables.set('auth_token', jsonData.data.token);",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Register Student",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Jane Student\",\n    \"email\": \"jane.student@akkuea.com\",\n    \"password\": \"securepassword123\",\n    \"role\": \"Student\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/auth/register",
          "host": ["{{base_url}}"],
          "path": ["auth", "register"]
        },
        "description": "Register a new student user"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test(\"User role is Student\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.user.role).to.eql('Student');",
              "});",
              "",
              "// Save token",
              "if (pm.response.code === 201) {",
              "    const jsonData = pm.response.json();",
              "    pm.collectionVariables.set('student_token', jsonData.data.token);",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Register Designer",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Bob Designer\",\n    \"email\": \"bob.designer@akkuea.com\",\n    \"password\": \"securepassword123\",\n    \"role\": \"Designer\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/auth/register",
          "host": ["{{base_url}}"],
          "path": ["auth", "register"]
        },
        "description": "Register a new designer user"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test(\"User role is Designer\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.user.role).to.eql('Designer');",
              "});",
              "",
              "// Save token",
              "if (pm.response.code === 201) {",
              "    const jsonData = pm.response.json();",
              "    pm.collectionVariables.set('designer_token', jsonData.data.token);",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Register Invalid Role",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Invalid Role User\",\n    \"email\": \"invalid@akkuea.com\",\n    \"password\": \"password123\",\n    \"role\": \"Administrator\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/auth/register",
          "host": ["{{base_url}}"],
          "path": ["auth", "register"]
        },
        "description": "Test registration with invalid role"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"Error indicates registration failed\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "    pm.expect(jsonData.error).to.include('registration_failed');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Register Duplicate Email",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Duplicate Email User\",\n    \"email\": \"john.educator@akkuea.com\",\n    \"password\": \"password123\",\n    \"role\": \"Student\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/auth/register",
          "host": ["{{base_url}}"],
          "path": ["auth", "register"]
        },
        "description": "Test registration with duplicate email"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"Error indicates user already exists\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.message).to.include('already exists');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Register Missing Fields",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Missing Email User\",\n    \"password\": \"password123\",\n    \"role\": \"Student\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/auth/register",
          "host": ["{{base_url}}"],
          "path": ["auth", "register"]
        },
        "description": "Test registration with missing required fields"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"Error indicates invalid input\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.error).to.eql('invalid_input');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Login Educator",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"john.educator@akkuea.com\",\n    \"password\": \"securepassword123\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/auth/login",
          "host": ["{{base_url}}"],
          "path": ["auth", "login"]
        },
        "description": "Login with educator credentials"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response contains token and user data\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('data');",
              "    pm.expect(jsonData.data).to.have.property('token');",
              "    pm.expect(jsonData.data).to.have.property('user');",
              "});",
              "",
              "pm.test(\"Message indicates successful login\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.message).to.eql('Login successful');",
              "});",
              "",
              "// Update token",
              "if (pm.response.code === 200) {",
              "    const jsonData = pm.response.json();",
              "    pm.collectionVariables.set('educator_token', jsonData.data.token);",
              "    pm.collectionVariables.set('auth_token', jsonData.data.token);",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Login Student",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"jane.student@akkuea.com\",\n    \"password\": \"securepassword123\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/auth/login",
          "host": ["{{base_url}}"],
          "path": ["auth", "login"]
        },
        "description": "Login with student credentials"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Update student token",
              "if (pm.response.code === 200) {",
              "    const jsonData = pm.response.json();",
              "    pm.collectionVariables.set('student_token', jsonData.data.token);",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Login Wrong Password",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"john.educator@akkuea.com\",\n    \"password\": \"wrongpassword\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/auth/login",
          "host": ["{{base_url}}"],
          "path": ["auth", "login"]
        },
        "description": "Test login with incorrect password"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 401\", function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test(\"Error indicates login failed\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.error).to.eql('login_failed');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Login Non-existent User",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"nonexistent@akkuea.com\",\n    \"password\": \"password123\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/auth/login",
          "host": ["{{base_url}}"],
          "path": ["auth", "login"]
        },
        "description": "Test login with non-existent user"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 401\", function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test(\"Error indicates login failed\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.error).to.eql('login_failed');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Protected Route - Valid Token",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{auth_token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/protected",
          "host": ["{{base_url}}"],
          "path": ["protected"]
        },
        "description": "Access protected route with valid token"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response grants access\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.message).to.include('Access granted');",
              "});",
              "",
              "pm.test(\"Response contains user role\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('role');",
              "});",
              "",
              "pm.test(\"Response contains timestamp\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('timestamp');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Protected Route - No Token",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/protected",
          "host": ["{{base_url}}"],
          "path": ["protected"]
        },
        "description": "Access protected route without token"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 401\", function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test(\"Error indicates authorization header required\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.error).to.include('Authorization header is required');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Protected Route - Invalid Token",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer invalid.token.here"
          }
        ],
        "url": {
          "raw": "{{base_url}}/protected",
          "host": ["{{base_url}}"],
          "path": ["protected"]
        },
        "description": "Access protected route with invalid token"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 401\", function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test(\"Error indicates invalid token\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.error).to.include('Invalid or expired token');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get Current User - Educator",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{educator_token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/auth/me",
          "host": ["{{base_url}}"],
          "path": ["auth", "me"]
        },
        "description": "Get current user information with educator token"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response contains user data\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('data');",
              "    pm.expect(jsonData.data).to.have.property('name');",
              "    pm.expect(jsonData.data).to.have.property('email');",
              "    pm.expect(jsonData.data).to.have.property('role');",
              "});",
              "",
              "pm.test(\"User role is Educator\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.role).to.eql('Educator');",
              "});",
              "",
              "pm.test(\"Password is not returned\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.data).to.not.have.property('password');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get Current User - Student",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{student_token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/auth/me",
          "host": ["{{base_url}}"],
          "path": ["auth", "me"]
        },
        "description": "Get current user information with student token"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"User role is Student\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.role).to.eql('Student');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get Current User - No Token",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/auth/me",
          "host": ["{{base_url}}"],
          "path": ["auth", "me"]
        },
        "description": "Get current user without token"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 401\", function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test(\"Error indicates authorization required\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.error).to.include('Authorization header is required');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Collection level pre-request script",
          "// This runs before every request in the collection"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Collection level test script",
          "// This runs after every request in the collection",
          "pm.test(\"Response time is reasonable\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "pm.test(\"Response has correct content type\", function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ]
}
